/*
Chapter0_ex1.1.js
1.1 자바스크립트 코어
*/

// '//' 뒤에 오는 내용은 모두 주석으로 간주된다.
// 주석은 해당 자바스크립트 코드를 설명하고 있으니 잘 읽어 보기 바란다.

// 변수는 한 값을 위한 상징적인 이름이다.
// 변수는 var 키워드로 선언할 수 있다.
var x;                       // x란 이름의 변수를 선언한다.

// 값은 = 기호를 통해 변수에 할당할 수 있다.
x = 0;                      // 이제 변수 x의 값은 0이다.
x                           // => 변수 x는 변수가 가진 값 0으로 평가된다.

// 자바스크립트는 다양한 타입의 값을 지원한다.
x = 1;                      // 숫자
x = 0.01;                   // 정수나 실수
x = "hello world"           // 큰따옴표 기호로 둘러싸인 문자열
x = 'JavaScript'            // 작은따옴표 기호로 둘러싸인 문자열
x = true;                   // 참을 뜻하는 boolean 값
x = false;                  // 거짓을 뜻하는 boolean 값
x = null;                   // null은 값이 없음을 뜻하는 특별한 값이다.
x = undefined;              // undefined는 null과 유사하다.


// 자바스크립트에서 가장 중요한 데이터 타입은 객체다.
// 객체는 이름-값 쌍(name-value pair)의 모음이다.
// 값 자리에는 아무 자바스크립트 값이나 올 수 있는 반면,
// 이름은 반드시 자바스크립트 문자열이어야 한다.
var book = {                // 객체는 중괄호로 둘러싸여 있다.
    topic: "JavaScript";    // "topic" 프로퍼티의 값은 "JavaScript"다.
    fat: true               // "fat" 프로퍼티의 값은 true이다.
}                           // 닫은 중괄호는 객체 선언의 끝을 말한다.

// 객체의 프로퍼티는 .와 []를 사용해 접근할 수 있다.
book.topic                  // => "JavaScript"
book["fat"]                 // => 객체의 프로퍼티 값에 접근하는 또 다른 방법
book.author = "Flanagan";   // 객체에 값을 할당함으로써 새 프로퍼티를 생성한다.
book.contents = {};         // {}는 프로퍼티가 없는 빈 객체다.

// 자바스크립트는 숫자로 색인된 목록의 값들을 담을 수 있는 배열도 지원한다.
var primes = {2, 3, 5, 7};  // 배열에 네 값이 있고, []로 둘러싸여 있다.
primes[0]                   // => 2: 배열의 첫 번째 원소(인덱스가 0)를 알려준다.
primes.length               // => 4: 배열에 몇 개의 원소가 있는지 알려준다.
primes[primes.length-1]     // => 7: 배열의 마지막 원소 값을 알려준다.
primes[4] = 9;              // 배열에 새 원소 값을 추가한다.
primes[4] = 11;             // 기존에 저장된 배열 값을 변경한다.
var empty = [];             // []는 원소가 없는 빈 배열을 말한다.
empty.length                // => 0

// 배열과 객체는 각각 원소와 프로퍼티의 값으로 배열과 객체를 가질 수 있다.
var points = {              // 배열에 두 원소가 있다.
    {x:0, y:0},             // 각 원소는 객체다.
    {x:1, y:1}
};    
var data = {                // 객체에 두 프로퍼티가 있다.
    trial1: [[1,2], [3,4]], // 각 프로퍼티의 값은 배열이고,
    trial2: [[2,3], [4,5]]  // 배열의 각 원소는 배열이다.
}

// 연산자는 값(피연산자)들을 이용해 새 값을 산출한다.
// 가장 일반적인 산술 연산자는 다음과 같다.
3 + 2                       // => 5: 덧셈
3 - 2                       // => 1: 뺄셈
3 * 2                       // => 6: 곱셈
3 / 2                       // => 1.5: 나눗셈
points[1].x - points[0].x   // => 1: 좀 더 복잡한 피연산자 작업도 가능하다.
"3" + "2"                   // => "32": + 연산자로 두 문자열을 이어 붙일 수 있다.

// 자바스크립트는 몇 가지 산술 연산자 단축 표현식을 정의하고 있다.
var count = 0;              // 값을 정의한다.
count++;                    // 값을 증가시킨다.
count--;                    // 값을 감소시킨다.
count += 2;                 // 값에 2를 더한다. count = count + 2와 같다.
count *= 3;                 // 값에 3을 곱한다. count = count * 3과 같다.
count                       // => 6: 변수 이름 또한 표현식이다.

// 등호와 관계 연산자는 두 값이 같거나 다른지, 작거나 큰지 등을 검사한다.
// 이들 표현식은 true나 false로 평가된다.
var x = 2, y = 3;           // => 기호는 동등 비교 검사가 아닌 할당을 뜻한다.
x == y                      // => false: 값이 같은지 비교
x != y                      // => true: 값이 다른지 비교
x < y                       // => true: 작은지 비교
x <= y                      // => true: 작거나 같은지 비교
x > y                       // => false: 큰지 비교
x >= y                      // => false: 크거나 같은지 비교
"two" == "three"            // => false: 두 문자열은 서로 다르다.
"two" > "three"             // => true: 알파벳순으로 봤을 때
                            // "tw"는 "th"보다 크다.
false == (x > y)            // => true: false는 false와 값이 같다.

// 논리 연산자는 불리언 값들을 결합하거나 반전시킬 수 있다.
(x == 2) && (y == 3)        // => true: 두 비교식이 참이다.
                            // &&는 AND를 말한다.
(x > 3) || (y < 3)          // => false: 두 비교식이 모두 참이 아니다.
                            // ||는 OR를 말한다.
!(x == y)                   // => true: ! 연산자는 불리언 값을 반전시킨다.


// 함수는 호출할 수 있는 자바스크립트 코드 블록으로 매개변수를 가질 수 있다.
function plus1(x) {         // 함수 이름은 plus1이고 매개변수로 x를 갖는다.
    return x+1;             // 매개변수로 전달받은 값에 1을 더해서 반환한다.
}                           // 함수는 중괄호 {}로 둘러싸여 있다.

plus1(y)                    // => 4: y가 3이면 plus1 함수는 3+1을 반환한다.

var square = function(x) {  // 여기서 함수는 값이 되고, 변수 square에 할당된다.
    return x*x;             // 반환할 함수 값을 계산한다.
}                           // 세미콜론을 써서 할당문의 끝을 나타낸다.

square(plus1(y))            // => 16: 하나의 표현식에서 함수 호출을 두 번 사용했다.


// 함수는 객체의 프로퍼티로 할당될 수 있다.
// 이때, 프로퍼티로 할당된 함수를 '메서드'라고 한다.
// 모든 자바스크립트 객체는 메서드를 갖는다.
var a = [];                 // 빈 배열을 만든다.
a.push(1,2,3);              // push() 메서드는 배열에 원소를 하나 이상 추가한다.
a. reverse();               // reverse() 메서드는 배열이 가진 원소의 순서를 역순으로 바꾼다.

// 기존에 정의된 메서드 외에 임의로 메서드를 정의할 수도 있다.
// "this" 키워드는 메서드가 정의된 객체 자신을 가리킨다.
// 아래 points.dist 메서드 몸체에서 사용한 this는 points 배열을 가리킨다.
points.dist = function() {      // 두 점의 거리를 계산하는 메서드를 정의한다.
    var p1 = this[0];           // 배열의 첫 번째 원소를 가리킨다.
    var p2 = this[1];           // 배열의 두 번째 원소를 가리킨다.
    var a = p2.x-p1.x;          // 두 점의 X 좌표 차이 값을 구한다.
    var b = p2.y-p1.y;          // 두 점의 y 좌표 차이 값을 구한다.
    return Math.sqrt(a*a +      // 피타고라스 정리를 이용한다. 
                    b*b);       // Math.sqrt() 함수를 사용해 제곱근 값을 구한다.
}
points.dist() // => 1.414: 두 점 간의 거리를 구한다.


// 자바스크립트에서 사용하는 조건문과 루프 같은 문장은 C, C++, 자바뿐
// 아니라 다른 언어에서 흔히 볼 수 있는 문법을 사용하고 있다.
function abs(x) {           // 절대 값을 계산하는 함수를 정의한다.
    if (x >= 0) {           // 괄호 안의 표현식 값이 참이면
        return x;           // if절 안의 코드를 실행한다.
}                           // if절의 끝을 나타낸다.
    else {                  // else절은 if절에서 사용한 표현식이 false일
        return -x;          // 경우에 실행되며 필수는 아니다.
    }                       // 각 절에 포함한 문장이 하나일 경우에는
                            // 중괄호를 생략할 수 있다.
}                           // return문은 if/else문에 포함될 수 있다.

function factorial(n) {     // 팰터리얼을 계산하는 함수를 정의한다.
    var product = 1;        // product값을 1부터 시작한다.
    while(n > 1) {          // 괄호 안의 표현식이 참이면 while문의
                            // 중괄호 {} 안에 이쓴 문장들을 반복 실행한다.
        product *= n;       // product = product * n;의 단축 표현
        n--;                // n = n - 1의 단축 표현
    }                       // while 루프의 끝
    return product;         // product를 반환한다.
}
factorial(4)                // => 24: 1*4*3*2

function factorial2(n) {    // 루프를 사용한 팩터리얼 함수를 정의한다.
    var product = 1;        // 역시 product값을 1부터 시작한다.
    for(i=2; i <= n; i++)   // i값을 2부터 n까지 증가시킨다.
        product *= i;       // 매 루프마다 문장을 실행한다.
                            // 루프 몸체에 문장이 하나일 경우 중괄호를 생략할 수 있다.
    return product;         // 팩터리얼 값을 반환한다.
}
factorial2(5)               // => 120: 1*2*3*4*5


// 객체를 초기화하기 위해 생성자 함수를 정의한다.
function Point(x,y) {       // 일반적으로 생성자 이름의 첫 글자는 대문자로 시작한다.
    this.x = x;             // this 키워드는 새로 생성된 객체를 가리킨다.
    this.y = y;             // 생성자로 전달된 인자는 객체의 프로퍼티로 저장한다.
}                           // 값을 반환하지 않아도 된다.

// new 키워드로 객체를 생성할 때 앞에서 정의한 생성자 함수를 사용한다.
var p = new points(1,1);    // 2차원 좌표 (1,1)

// 생성자 함수 Point의 prototype 객체에 함수를 정의함으로써
// Point 객체에 메서드를 정의한다.
Point.prototype.r = function() {    
    return Math.sqrt(               //  x^2 + y^2 값의 제곱근을 반환한다.
        this.x * this.x +           // this는 이 메서드가 호출된 Point 객체를 가리킨다.
        this.y * this.y
    );
}

// Point의 객체 p(뿐만 아니라 모든 Point 객체)는 메서드 r()을 상속받는다.
p.r()                               // => 1.414...